{"version":3,"sources":["components/header/header.js","components/form/form.js","components/results/results.js","components/footer/footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Form","props","handleChange","event","preventDefault","userInput","target","value","setState","url","handleSubmit","a","console","log","state","fetch","raw","json","data","count","apiResults","result","handler","method","onSubmit","this","type","id","onChange","prompt","onClick","React","Component","Results","results","map","Footer","App","handleForm","loading","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8TAWeA,MANf,WACE,OAAQ,4BAAQC,UAAU,cACxB,uC,uBCuDWC,G,wDAzDZ,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAORC,aAAe,SAAAC,GACbA,EAAMC,iBACN,IAAIC,EAAYF,EAAMG,OAAOC,MAC7B,EAAKC,SAAS,CAACC,IAAKJ,KAXF,EAepBK,aAfoB,uCAeL,WAAMP,GAAN,qBAAAQ,EAAA,6DACbR,EAAMC,iBACNQ,QAAQC,IAAI,kBAAmB,EAAKC,MAAML,KAF7B,SAKGM,MAAM,EAAKD,MAAML,KALpB,cAKTO,EALS,gBAMIA,EAAIC,OANR,OAMTC,EANS,OAUTC,EAAQD,EAAKC,MAGbC,EAAaF,EAAKG,OAEtB,EAAKpB,MAAMqB,QAAQH,EAAOC,GAfb,4CAfK,sDAElB,EAAKN,MAAQ,CACXL,IAAK,GACLc,OAAQ,OAJQ,E,qDAoCV,IAAD,OACP,OACE,0BAAMC,SAAUC,KAAKf,cACnB,2BAAOgB,KAAK,OAAOC,GAAG,UAAUC,SAAUH,KAAKvB,eAC/C,gCAASuB,KAAKxB,MAAM4B,QACpB,2BAAO9B,UAAU,SAAS2B,KAAK,SAASnB,MAAM,MAAMuB,QAAS,kBAAM,EAAKtB,SAAS,CAACe,OAAQ,WAC1F,2BAAOxB,UAAU,SAAS2B,KAAK,SAASnB,MAAM,OAAOuB,QAAS,kBAAM,EAAKtB,SAAS,CAACe,OAAQ,YAC3F,2BAAOxB,UAAU,SAAS2B,KAAK,SAASnB,MAAM,MAAMuB,QAAS,kBAAM,EAAKtB,SAAS,CAACe,OAAQ,WAC1F,2BAAOxB,UAAU,SAAS2B,KAAK,SAASnB,MAAM,SAASuB,QAAS,kBAAM,EAAKtB,SAAS,CAACe,OAAQ,mB,GA7ClFQ,IAAMC,Y,gBCmBVC,MApBf,SAAiBhC,GACf,OACE,yBAAK0B,GAAG,WACN,sCAAY1B,EAAMkB,OAEnB,uCACC,4BACGlB,EAAMiC,QAAQC,KAAI,SAAAd,GACjB,OACE,4BACE,kBAAC,IAAD,CAAYH,KAAMG,W,MCFjBe,MANf,WACE,OAAQ,4BAAQrC,UAAU,cACxB,qDCiCWsC,G,wDA9Bb,WAAYpC,GAAQ,IAAD,8BACjB,cAAMA,IAURqC,WAAa,SAACnB,EAAOe,GACnB,EAAK1B,SAAS,CAAEW,QAAOe,aAVvB,EAAKpB,MAAQ,CACXK,MAAO,EACPe,QAAS,GACTK,SAAS,GALM,E,qDAiBjB,OACE,oCACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMV,OAAO,gBAAiBP,QAASG,KAAKa,aAC5C,kBAAC,EAAD,CAASnB,MAAOM,KAAKX,MAAMK,MAAMe,QAAST,KAAKX,MAAMoB,UAErD,kBAAC,EAAD,W,GAzBYH,IAAMC,YCIJQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.b3973abb.chunk.js","sourcesContent":["// Header component function\n\nimport React from 'react';\nimport './header.scss';  \n\nfunction Header() {\n  return (<header className=\"App-header\">\n    <h1>RESTy</h1>\n  </header>);\n}\n\nexport default Header;","// FOOTER COMPONENT\nimport React from 'react';\nimport './form.scss';\n\nclass Form extends React.Component {\n   constructor(props) {\n    super(props);\n    this.state = {\n      url: '',\n      method: 'GET',\n    }\n  }\n\n  handleChange = event => {\n    event.preventDefault();\n    let userInput = event.target.value;\n    this.setState({url: userInput});\n  }\n\n  // Asynchronous Fetching of Data\n  handleSubmit = async event => {\n    event.preventDefault();\n    console.log('URL SUBMITTED: ', this.state.url);\n\n// Fetch: Go to this URL and GET from it\n    let raw = await fetch(this.state.url);\n    let data = await raw.json();\n// Cool, got the data!\n\n// Keep track of count\n    let count = data.count;\n\n//Format the results\n    let apiResults = data.result;\n\n    this.props.handler(count, apiResults);\n  };\n\n\n \n\n  render() {\n    return(\n      <form onSubmit={this.handleSubmit}>\n        <input type=\"text\" id=\"urlText\" onChange={this.handleChange}/>\n        <button>{this.props.prompt}</button>\n        <input className=\"button\" type=\"button\" value=\"GET\" onClick={() => this.setState({method: \"GET\",})}/>\n        <input className=\"button\" type=\"button\" value=\"POST\" onClick={() => this.setState({method: \"POST\",})}/>\n        <input className=\"button\" type=\"button\" value=\"PUT\" onClick={() => this.setState({method: \"PUT\",})}/>\n        <input className=\"button\" type=\"button\" value=\"DELETE\" onClick={() => this.setState({method: \"DELETE\",})}/>\n      </form>\n    )\n  //     {/* DISPLAY API REQUEST */}\n  //     <section id=\"apiRequestDisplay\">\n  //       <p>{this.state.method} {this.state.url}</p>\n  //     </section>\n\n  //   </div>\n  //   )\n  }\n}\n\nexport default Form;","import React from 'react';\nimport JSONPretty from 'react-json-pretty';\n\nfunction Results(props) {\n  return(\n    <div id='results'>\n      <h2>Count: {props.count}</h2>\n      {/* <h4>Header: <JSONPretty data={props.headers}/></h4> */}\n     <p>Results:</p>\n      <ul>\n        {props.results.map(result => {\n          return (\n            <li>\n              <JSONPretty data={result}/>\n              \n            </li>\n          )\n        })}\n      </ul>\n    </div>\n  )\n}\n\nexport default Results;","//Footer Component Function\n\nimport React from 'react';\nimport './footer.scss';\n\nfunction Footer() {\n  return (<footer className=\"App-footer\">\n    <p>@ 2020 Daisy Johnson</p>\n  </footer>)\n}\n\nexport default Footer;","import React from 'react';\nimport Header from './components/header/header.js';\nimport Form from './components/form/form.js';\nimport Results from './components/results/results.js';\nimport Footer from './components/footer/footer.js';\n// import JSONPretty from 'react-json-pretty';\nimport './App.css';\n\nclass App extends React.Component{\n // By calling super(props) you are calling the constructor of React.Component. Super references parent class.\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0,\n      results: [],\n      loading: false,\n    };\n  }\n\n\n  // Every time a change occurs in our input, we call handleForm to output our data in the desired way.\n  handleForm = (count, results) => {\n    this.setState({ count, results });\n  };\n\n  // We are returning these results in our desired format, and rendering them to the app.\n  render(){\n    return(\n      <>\n      <Header />\n      <Form prompt=\"Enter API URL\"  handler={this.handleForm} />\n      <Results count={this.state.count}results={this.state.results}  />\n\n      <Footer />\n      </>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}